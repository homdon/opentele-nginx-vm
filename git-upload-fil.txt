# Summary: How to Push Your Project to a New GitHub Repository

# This guide outlines the steps to initialize a Git repository in your local project, add files, commit them, link to a remote GitHub repository, and push your changes.

# **Steps:**

# 1.  **Initialize Git in your project folder:**
Command:
```bash
git init
```

# 2.  **Add specific files or folders you want to track:**
# (Example: `Dockerfile` and `kubectl/` folder)
Command:
```bash
git add Dockerfile kubectl/
```

# 3.  **Commit the added files with a descriptive message:**
Command:
```bash
git commit -m "Initial commit with Dockerfile and kubectl folder"
```

# 4.  **Add the remote GitHub repository URL:**
# (Replace `yourusername/your-repo.git` with your actual GitHub repository path)
Command:
```bash
git remote add origin https://github.com/yourusername/your-repo.git
```

# 5.  **Rename your branch to `main` (optional but recommended):**
Command:
```bash
git branch -M main
```

# 6.  **Push your local commits to GitHub:**
Command:
```bash
git push -u origin main
```
# *   **Important Note for Password Prompt:** When Git asks for your password during the push, **do NOT** enter your GitHub account password. Instead, use a **Personal Access Token (PAT)** generated from your GitHub account. You can generate one here: `https://github.com/settings/tokens`. Use this PAT as your password when prompted.

# 7.  **Verify your files on GitHub:**
# Go to your repository URL in a browser and confirm your files are there.

# **Optional Good Practices:**

# *   Create a `.gitignore` file to exclude specific files/folders from being tracked by Git.
# *   Add a `README.md` file to describe your project.
# *   Include a `LICENSE` file if your project is open source.

Command List Only
bash
Copy
Edit
git init
git add Dockerfile kubectl/
git commit -m "Initial commit with Dockerfile and kubectl folder"
git remote add origin https://github.com/yourusername/your-repo.git
git branch -M main
git push -u origin main
